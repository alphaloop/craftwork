from . import images
from mcpi import block

_flatten = lambda l: [item for sublist in l for item in sublist]

_WIDTH = 8
_HEIGHT = 8
_CHARSPACE = 1
_ = 0
X = 1
_CHARACTER_MAP = {
  " ": _flatten([
    [_,_,_,_,_,_,_,_],
    [_,_,_,_,_,_,_,_],
    [_,_,_,_,_,_,_,_],
    [_,_,_,_,_,_,_,_],
    [_,_,_,_,_,_,_,_],
    [_,_,_,_,_,_,_,_],
    [_,_,_,_,_,_,_,_],
    [_,_,_,_,_,_,_,_],
  ]),
  "!": _flatten([
    [_,_,_,X,X,_,_,_],
    [_,_,_,X,X,_,_,_],
    [_,_,_,X,X,_,_,_],
    [_,_,_,X,X,_,_,_],
    [_,_,_,X,X,_,_,_],
    [_,_,_,X,X,_,_,_],
    [_,_,_,_,_,_,_,_],
    [_,_,_,X,X,_,_,_],
  ]),
  ".": _flatten([
    [_,_,_,_,_,_,_,_],
    [_,_,_,_,_,_,_,_],
    [_,_,_,_,_,_,_,_],
    [_,_,_,_,_,_,_,_],
    [_,_,_,_,_,_,_,_],
    [_,_,_,_,_,_,_,_],
    [_,_,_,X,X,_,_,_],
    [_,_,_,X,X,_,_,_],
  ]),
  ",": _flatten([
    [_,_,_,_,_,_,_,_],
    [_,_,_,_,_,_,_,_],
    [_,_,_,_,_,_,_,_],
    [_,_,_,_,_,_,_,_],
    [_,_,_,_,_,_,_,_],
    [_,_,_,_,_,_,_,_],
    [_,_,_,X,X,_,_,_],
    [_,_,X,X,_,_,_,_],
  ]),
  "?": _flatten([
    [_,X,X,X,X,X,_,_],
    [X,_,_,_,_,_,X,_],
    [_,_,_,_,_,_,_,X],
    [_,_,_,_,_,_,_,X],
    [_,_,_,X,X,X,X,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,_,_,_,_,_],
    [_,_,_,X,_,_,_,_],
  ]),
  "A": _flatten([
    [_,_,_,X,X,_,_,_],
    [_,_,X,_,_,X,_,_],
    [_,X,_,_,_,_,X,_],
    [_,X,_,_,_,_,X,_],
    [X,X,X,X,X,X,X,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X]
  ]),
  "B": _flatten([
    [X,X,X,X,X,X,_,_],
    [X,_,_,_,_,_,X,_],
    [X,_,_,_,_,_,_,X],
    [X,X,X,X,X,X,X,_],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,X,_],
    [X,X,X,X,X,X,_,_],
  ]),
  "C": _flatten([
    [_,_,X,X,X,X,X,X],
    [_,X,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [_,X,_,_,_,_,_,_],
    [_,_,X,X,X,X,X,X],
  ]),
  "D": _flatten([
    [X,X,X,X,X,X,_,_],
    [X,_,_,_,_,_,X,_],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,X,_],
    [X,X,X,X,X,X,_,_],
  ]),
  "E": _flatten([
    [X,X,X,X,X,X,X,X],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,X,X,X,X,X,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,X,X,X,X,X,X,X],
  ]),
  "F": _flatten([
    [X,X,X,X,X,X,X,X],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,X,X,X,X,X,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
  ]),
  "G": _flatten([
    [_,X,X,X,X,X,X,X],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,X,X,X,X],
    [X,_,_,_,_,_,_,X],
    [_,X,_,_,_,_,_,X],
    [_,_,X,X,X,X,X,X],
  ]),
  "H": _flatten([
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,X,X,X,X,X,X,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
  ]),
  "I": _flatten([
    [X,X,X,X,X,X,X,X],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
    [X,X,X,X,X,X,X,X],
  ]),
  "J": _flatten([
    [_,X,X,X,X,X,X,X],
    [_,_,_,_,_,_,_,X],
    [_,_,_,_,_,_,_,X],
    [_,_,_,_,_,_,_,X],
    [_,_,_,_,_,_,_,X],
    [_,_,_,_,_,_,_,X],
    [_,_,_,_,_,_,X,_],
    [_,X,X,X,X,X,_,_],
  ]),
  "K": _flatten([
    [X,_,_,_,_,X,_,_],
    [X,_,_,_,X,_,_,_],
    [X,_,_,X,_,_,_,_],
    [X,_,X,_,_,_,_,_],
    [X,X,X,_,_,_,_,_],
    [X,_,_,X,_,_,_,_],
    [X,_,_,_,X,_,_,_],
    [X,_,_,_,_,X,_,_],
  ]),
  "L": _flatten([
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,X,X,X,X,X,X,X],
  ]),
  "M": _flatten([
    [X,_,_,_,_,_,_,X],
    [X,X,_,_,_,_,X,X],
    [X,_,X,_,_,X,_,X],
    [X,_,X,_,_,X,_,X],
    [X,_,_,X,X,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
  ]),
  "N": _flatten([
    [X,_,_,_,_,_,_,X],
    [X,X,_,_,_,_,_,X],
    [X,_,X,_,_,_,_,X],
    [X,_,X,_,_,_,_,X],
    [X,_,_,X,X,_,_,X],
    [X,_,_,_,_,X,_,X],
    [X,_,_,_,_,X,_,X],
    [X,_,_,_,_,_,X,X],
  ]),
  "O": _flatten([
    [_,_,X,X,X,X,_,_],
    [_,X,_,_,_,_,X,_],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [_,X,_,_,_,_,X,_],
    [_,_,X,X,X,X,_,_],
  ]),
  "P": _flatten([
    [X,X,X,X,X,X,_,_],
    [X,_,_,_,_,_,X,_],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,X,_],
    [X,X,X,X,X,X,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
  ]),
  "Q": _flatten([
    [_,_,X,X,X,X,_,_],
    [_,X,_,_,_,_,X,_],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,X,_,X],
    [_,X,_,_,_,_,X,_],
    [_,_,X,X,X,X,_,X],
  ]),
  "R": _flatten([
    [X,X,X,X,X,X,_,_],
    [X,_,_,_,_,_,X,_],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,X,_],
    [X,X,X,X,X,X,_,_],
    [X,_,X,_,_,_,_,_],
    [X,_,_,X,X,_,_,_],
    [X,_,_,_,_,X,X,X],
  ]),
  "S": _flatten([
    [_,_,X,X,X,X,X,X],
    [_,X,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [_,X,_,_,_,_,_,_],
    [_,_,X,X,X,X,X,_],
    [_,_,_,_,_,_,_,X],
    [_,_,_,_,_,_,X,_],
    [X,X,X,X,X,X,_,_],
  ]),
  "T": _flatten([
    [X,X,X,X,X,X,X,X],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
  ]),
  "U": _flatten([
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [_,X,_,_,_,_,X,_],
    [_,_,X,X,X,X,_,_],
  ]),
  "V": _flatten([
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [_,X,_,_,_,_,X,_],
    [_,_,X,_,_,X,_,_],
    [_,_,_,X,X,_,_,_],
  ]),
  "W": _flatten([
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,X,X,_,_,X],
    [X,_,X,_,_,X,_,X],
    [X,_,X,_,_,X,_,X],
    [X,X,_,_,_,_,X,X],
    [X,_,_,_,_,_,_,X],
  ]),
  "X": _flatten([
    [X,_,_,_,_,_,_,X],
    [_,X,_,_,_,_,X,_],
    [_,_,X,_,_,X,_,_],
    [_,_,_,X,X,_,_,_],
    [_,_,_,X,X,_,_,_],
    [_,_,X,_,_,X,_,_],
    [_,X,_,_,_,_,X,_],
    [X,_,_,_,_,_,_,X],
  ]),
  "Y": _flatten([
    [X,_,_,_,_,_,X,_],
    [_,X,_,_,_,X,_,_],
    [_,_,X,_,X,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
  ]),
  "Z": _flatten([
    [X,X,X,X,X,X,X,X],
    [_,_,_,_,_,_,X,_],
    [_,_,_,_,_,X,_,_],
    [_,_,_,_,X,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,X,_,_,_,_,_],
    [_,X,_,_,_,_,_,_],
    [X,X,X,X,X,X,X,X],
  ]),
}

class Text:
  
  def __init__(self, forground_block, background_block):
    block_map = {
      0: background_block,
      1: forground_block
    }
    self.create_character_map(block_map)

  def create_character_map(self, block_map):
    self.character_map = dict()
    for key in _CHARACTER_MAP.keys():
      self.character_map[key] = images.Image(_WIDTH, _HEIGHT, _CHARACTER_MAP[key], block_map)
  
  def render(self, start_block, text):
    text = text.upper()
    b = start_block.copy()
    for character in text:
      char_image = self.character_map[character]
      if char_image:
        char_image.render_tall(b)
        b.right(_WIDTH + _CHARSPACE)